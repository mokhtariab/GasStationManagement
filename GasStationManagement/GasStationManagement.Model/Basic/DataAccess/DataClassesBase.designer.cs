#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GasStationManagement.Model.Basic.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GasStationManagement")]
	public partial class DataClassesBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTBL_Monitoring(TBL_Monitoring instance);
    partial void UpdateTBL_Monitoring(TBL_Monitoring instance);
    partial void DeleteTBL_Monitoring(TBL_Monitoring instance);
    partial void InsertTBL_CounterInsLoc(TBL_CounterInsLoc instance);
    partial void UpdateTBL_CounterInsLoc(TBL_CounterInsLoc instance);
    partial void DeleteTBL_CounterInsLoc(TBL_CounterInsLoc instance);
    partial void InsertTBL_GasStationType(TBL_GasStationType instance);
    partial void UpdateTBL_GasStationType(TBL_GasStationType instance);
    partial void DeleteTBL_GasStationType(TBL_GasStationType instance);
    partial void InsertTBL_WorkingPressure(TBL_WorkingPressure instance);
    partial void UpdateTBL_WorkingPressure(TBL_WorkingPressure instance);
    partial void DeleteTBL_WorkingPressure(TBL_WorkingPressure instance);
    partial void InsertTBL_ZoneOperation(TBL_ZoneOperation instance);
    partial void UpdateTBL_ZoneOperation(TBL_ZoneOperation instance);
    partial void DeleteTBL_ZoneOperation(TBL_ZoneOperation instance);
    partial void InsertTBL_UseType(TBL_UseType instance);
    partial void UpdateTBL_UseType(TBL_UseType instance);
    partial void DeleteTBL_UseType(TBL_UseType instance);
    partial void InsertTBL_MonitoringSysState(TBL_MonitoringSysState instance);
    partial void UpdateTBL_MonitoringSysState(TBL_MonitoringSysState instance);
    partial void DeleteTBL_MonitoringSysState(TBL_MonitoringSysState instance);
    partial void InsertTBL_Line(TBL_Line instance);
    partial void UpdateTBL_Line(TBL_Line instance);
    partial void DeleteTBL_Line(TBL_Line instance);
    partial void InsertTBL_Store(TBL_Store instance);
    partial void UpdateTBL_Store(TBL_Store instance);
    partial void DeleteTBL_Store(TBL_Store instance);
    partial void InsertTBL_WorkShop(TBL_WorkShop instance);
    partial void UpdateTBL_WorkShop(TBL_WorkShop instance);
    partial void DeleteTBL_WorkShop(TBL_WorkShop instance);
    partial void InsertTBL_Calibration(TBL_Calibration instance);
    partial void UpdateTBL_Calibration(TBL_Calibration instance);
    partial void DeleteTBL_Calibration(TBL_Calibration instance);
    partial void InsertTBL_TemperatureGage(TBL_TemperatureGage instance);
    partial void UpdateTBL_TemperatureGage(TBL_TemperatureGage instance);
    partial void DeleteTBL_TemperatureGage(TBL_TemperatureGage instance);
    partial void InsertTBL_TemperatureTransmitter(TBL_TemperatureTransmitter instance);
    partial void UpdateTBL_TemperatureTransmitter(TBL_TemperatureTransmitter instance);
    partial void DeleteTBL_TemperatureTransmitter(TBL_TemperatureTransmitter instance);
    partial void InsertTBL_TemperatureSensor(TBL_TemperatureSensor instance);
    partial void UpdateTBL_TemperatureSensor(TBL_TemperatureSensor instance);
    partial void DeleteTBL_TemperatureSensor(TBL_TemperatureSensor instance);
    partial void InsertTBL_Counter(TBL_Counter instance);
    partial void UpdateTBL_Counter(TBL_Counter instance);
    partial void DeleteTBL_Counter(TBL_Counter instance);
    partial void InsertTBL_EVCD(TBL_EVCD instance);
    partial void UpdateTBL_EVCD(TBL_EVCD instance);
    partial void DeleteTBL_EVCD(TBL_EVCD instance);
    partial void InsertTBL_EquipmentState(TBL_EquipmentState instance);
    partial void UpdateTBL_EquipmentState(TBL_EquipmentState instance);
    partial void DeleteTBL_EquipmentState(TBL_EquipmentState instance);
    partial void InsertTBL_Supplier(TBL_Supplier instance);
    partial void UpdateTBL_Supplier(TBL_Supplier instance);
    partial void DeleteTBL_Supplier(TBL_Supplier instance);
    partial void InsertTBL_LocationState(TBL_LocationState instance);
    partial void UpdateTBL_LocationState(TBL_LocationState instance);
    partial void DeleteTBL_LocationState(TBL_LocationState instance);
    partial void InsertTBL_PressureGage(TBL_PressureGage instance);
    partial void UpdateTBL_PressureGage(TBL_PressureGage instance);
    partial void DeleteTBL_PressureGage(TBL_PressureGage instance);
    partial void InsertTBL_PressureTransmitter(TBL_PressureTransmitter instance);
    partial void UpdateTBL_PressureTransmitter(TBL_PressureTransmitter instance);
    partial void DeleteTBL_PressureTransmitter(TBL_PressureTransmitter instance);
    partial void InsertTBL_StationLinkType(TBL_StationLinkType instance);
    partial void UpdateTBL_StationLinkType(TBL_StationLinkType instance);
    partial void DeleteTBL_StationLinkType(TBL_StationLinkType instance);
    partial void InsertTBL_Parameter(TBL_Parameter instance);
    partial void UpdateTBL_Parameter(TBL_Parameter instance);
    partial void DeleteTBL_Parameter(TBL_Parameter instance);
    partial void InsertTable_TSample(Table_TSample instance);
    partial void UpdateTable_TSample(Table_TSample instance);
    partial void DeleteTable_TSample(Table_TSample instance);
    #endregion
		
		public DataClassesBaseDataContext() : 
				base(global::GasStationManagement.Model.Properties.Settings.Default.GasStationManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TBL_Monitoring> TBL_Monitorings
		{
			get
			{
				return this.GetTable<TBL_Monitoring>();
			}
		}
		
		public System.Data.Linq.Table<TBL_CounterInsLoc> TBL_CounterInsLocs
		{
			get
			{
				return this.GetTable<TBL_CounterInsLoc>();
			}
		}
		
		public System.Data.Linq.Table<TBL_GasStationType> TBL_GasStationTypes
		{
			get
			{
				return this.GetTable<TBL_GasStationType>();
			}
		}
		
		public System.Data.Linq.Table<TBL_WorkingPressure> TBL_WorkingPressures
		{
			get
			{
				return this.GetTable<TBL_WorkingPressure>();
			}
		}
		
		public System.Data.Linq.Table<TBL_ZoneOperation> TBL_ZoneOperations
		{
			get
			{
				return this.GetTable<TBL_ZoneOperation>();
			}
		}
		
		public System.Data.Linq.Table<TBL_UseType> TBL_UseTypes
		{
			get
			{
				return this.GetTable<TBL_UseType>();
			}
		}
		
		public System.Data.Linq.Table<TBL_MonitoringSysState> TBL_MonitoringSysStates
		{
			get
			{
				return this.GetTable<TBL_MonitoringSysState>();
			}
		}
		
		public System.Data.Linq.Table<TBL_Line> TBL_Lines
		{
			get
			{
				return this.GetTable<TBL_Line>();
			}
		}
		
		public System.Data.Linq.Table<TBL_Store> TBL_Stores
		{
			get
			{
				return this.GetTable<TBL_Store>();
			}
		}
		
		public System.Data.Linq.Table<TBL_WorkShop> TBL_WorkShops
		{
			get
			{
				return this.GetTable<TBL_WorkShop>();
			}
		}
		
		public System.Data.Linq.Table<TBL_Calibration> TBL_Calibrations
		{
			get
			{
				return this.GetTable<TBL_Calibration>();
			}
		}
		
		public System.Data.Linq.Table<TBL_TemperatureGage> TBL_TemperatureGages
		{
			get
			{
				return this.GetTable<TBL_TemperatureGage>();
			}
		}
		
		public System.Data.Linq.Table<TBL_TemperatureTransmitter> TBL_TemperatureTransmitters
		{
			get
			{
				return this.GetTable<TBL_TemperatureTransmitter>();
			}
		}
		
		public System.Data.Linq.Table<TBL_TemperatureSensor> TBL_TemperatureSensors
		{
			get
			{
				return this.GetTable<TBL_TemperatureSensor>();
			}
		}
		
		public System.Data.Linq.Table<TBL_Counter> TBL_Counters
		{
			get
			{
				return this.GetTable<TBL_Counter>();
			}
		}
		
		public System.Data.Linq.Table<TBL_EVCD> TBL_EVCDs
		{
			get
			{
				return this.GetTable<TBL_EVCD>();
			}
		}
		
		public System.Data.Linq.Table<TBL_EquipmentState> TBL_EquipmentStates
		{
			get
			{
				return this.GetTable<TBL_EquipmentState>();
			}
		}
		
		public System.Data.Linq.Table<TBL_Supplier> TBL_Suppliers
		{
			get
			{
				return this.GetTable<TBL_Supplier>();
			}
		}
		
		public System.Data.Linq.Table<TBL_LocationState> TBL_LocationStates
		{
			get
			{
				return this.GetTable<TBL_LocationState>();
			}
		}
		
		public System.Data.Linq.Table<TBL_PressureGage> TBL_PressureGages
		{
			get
			{
				return this.GetTable<TBL_PressureGage>();
			}
		}
		
		public System.Data.Linq.Table<TBL_PressureTransmitter> TBL_PressureTransmitters
		{
			get
			{
				return this.GetTable<TBL_PressureTransmitter>();
			}
		}
		
		public System.Data.Linq.Table<VW_Line> VW_Lines
		{
			get
			{
				return this.GetTable<VW_Line>();
			}
		}
		
		public System.Data.Linq.Table<TBL_StationLinkType> TBL_StationLinkTypes
		{
			get
			{
				return this.GetTable<TBL_StationLinkType>();
			}
		}
		
		public System.Data.Linq.Table<TBL_Parameter> TBL_Parameters
		{
			get
			{
				return this.GetTable<TBL_Parameter>();
			}
		}
		
		public System.Data.Linq.Table<Table_TSample> Table_TSamples
		{
			get
			{
				return this.GetTable<Table_TSample>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_MonitoringDelete")]
		public int SP_MonitoringDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_MonitoringInsert")]
		public int SP_MonitoringInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Size", DbType="Float")] System.Nullable<double> size, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Class", DbType="VarChar(50)")] string @class, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Grate", DbType="Int")] System.Nullable<int> grate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, brand, size, @class, grate, isActive, description, msgRet);
			msgRet = ((string)(result.GetParameterValue(7)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_MonitoringUpdate")]
		public int SP_MonitoringUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Size", DbType="Float")] System.Nullable<double> size, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Class", DbType="VarChar(50)")] string @class, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Grate", DbType="Int")] System.Nullable<int> grate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, brand, size, @class, grate, isActive, description, msgRet);
			msgRet = ((string)(result.GetParameterValue(7)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CounterInsLocDelete")]
		public int SP_CounterInsLocDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CounterInsLocUpdate")]
		public int SP_CounterInsLocUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CounterInsLocInsert")]
		public int SP_CounterInsLocInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_GasStationTypeDelete")]
		public int SP_GasStationTypeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_GasStationTypeUpdate")]
		public int SP_GasStationTypeUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_GasStationTypeInsert")]
		public int SP_GasStationTypeInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_StationLinkTypeDelete")]
		public int SP_StationLinkTypeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_UseTypeDelete")]
		public int SP_UseTypeDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_UseTypeUpdate")]
		public int SP_UseTypeUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_UseTypeInsert")]
		public int SP_UseTypeInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_ZoneOperationDelete")]
		public int SP_ZoneOperationDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_ZoneOperationUpdate")]
		public int SP_ZoneOperationUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_ZoneOperationInsert")]
		public int SP_ZoneOperationInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_MonitoringSysStateDelete")]
		public int SP_MonitoringSysStateDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_MonitoringSysStateUpdate")]
		public int SP_MonitoringSysStateUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_MonitoringSysStateInsert")]
		public int SP_MonitoringSysStateInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LineDelete")]
		public int SP_LineDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LineUpdate")]
		public int SP_LineUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ZoneOperation_Id", DbType="SmallInt")] System.Nullable<short> zoneOperation_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(500)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, zoneOperation_Id, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LineInsert")]
		public int SP_LineInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ZoneOperation_Id", DbType="SmallInt")] System.Nullable<short> zoneOperation_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(500)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, zoneOperation_Id, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_StoreDelete")]
		public int SP_StoreDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_StoreUpdate")]
		public int SP_StoreUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_StoreInsert")]
		public int SP_StoreInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_SupplierDelete")]
		public int SP_SupplierDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_SupplierUpdate")]
		public int SP_SupplierUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="VarChar(500)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tel", DbType="VarChar(50)")] string tel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, address, tel, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_SupplierInsert")]
		public int SP_SupplierInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="VarChar(500)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tel", DbType="VarChar(50)")] string tel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, address, tel, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CalibrationDelete")]
		public int SP_CalibrationDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CalibrationUpdate")]
		public int SP_CalibrationUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CalibrationInsert")]
		public int SP_CalibrationInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CounterDelete")]
		public int SP_CounterDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CounterInsert")]
		public int SP_CounterInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Size", DbType="Float")] System.Nullable<double> size, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Class", DbType="VarChar(50)")] string @class, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Grate", DbType="Int")] System.Nullable<int> grate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, size, @class, grate, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_CounterUpdate")]
		public int SP_CounterUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Size", DbType="Float")] System.Nullable<double> size, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Class", DbType="VarChar(50)")] string @class, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Grate", DbType="Int")] System.Nullable<int> grate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, size, @class, grate, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_EVCDDelete")]
		public int SP_EVCDDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_EVCDInsert")]
		public int SP_EVCDInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Model", DbType="VarChar(50)")] string model, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMin", DbType="Int")] System.Nullable<int> pMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMax", DbType="Int")] System.Nullable<int> pMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, model, brand, pMin, pMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_EVCDUpdate")]
		public int SP_EVCDUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Model", DbType="VarChar(50)")] string model, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMin", DbType="Int")] System.Nullable<int> pMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMax", DbType="Int")] System.Nullable<int> pMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, model, brand, pMin, pMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LocationStateDelete")]
		public int SP_LocationStateDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LocationStateInsert")]
		public int SP_LocationStateInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LocationStateUpdate")]
		public int SP_LocationStateUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PressureGageDelete")]
		public int SP_PressureGageDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PressureGageInsert")]
		public int SP_PressureGageInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GageSize", DbType="Float")] System.Nullable<double> gageSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMax", DbType="Int")] System.Nullable<int> pMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, gageSize, pMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(7)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PressureGageUpdate")]
		public int SP_PressureGageUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GageSize", DbType="Float")] System.Nullable<double> gageSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMax", DbType="Int")] System.Nullable<int> pMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, gageSize, pMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(7)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PressureTransmitterDelete")]
		public int SP_PressureTransmitterDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PressureTransmitterInsert")]
		public int SP_PressureTransmitterInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Model", DbType="VarChar(50)")] string model, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HMIState", DbType="Bit")] System.Nullable<bool> hMIState, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMax", DbType="Int")] System.Nullable<int> pMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, model, brand, hMIState, pMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_PressureTransmitterUpdate")]
		public int SP_PressureTransmitterUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Model", DbType="VarChar(50)")] string model, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HMIState", DbType="Bit")] System.Nullable<bool> hMIState, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PMax", DbType="Int")] System.Nullable<int> pMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, model, brand, hMIState, pMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureGageDelete")]
		public int SP_TemperatureGageDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureGageInsert")]
		public int SP_TemperatureGageInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GageSize", DbType="Float")] System.Nullable<double> gageSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PacketLength", DbType="Float")] System.Nullable<double> packetLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMin", DbType="Int")] System.Nullable<int> tMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMax", DbType="Int")] System.Nullable<int> tMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, gageSize, packetLength, tMin, tMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureGageUpdate")]
		public int SP_TemperatureGageUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GageSize", DbType="Float")] System.Nullable<double> gageSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PacketLength", DbType="Float")] System.Nullable<double> packetLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMin", DbType="Int")] System.Nullable<int> tMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMax", DbType="Int")] System.Nullable<int> tMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, gageSize, packetLength, tMin, tMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureSensorDelete")]
		public int SP_TemperatureSensorDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureSensorInsert")]
		public int SP_TemperatureSensorInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SensorType", DbType="VarChar(20)")] string sensorType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WireCount", DbType="Int")] System.Nullable<int> wireCount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PacketLength", DbType="Float")] System.Nullable<double> packetLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMin", DbType="Int")] System.Nullable<int> tMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMax", DbType="Int")] System.Nullable<int> tMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, sensorType, wireCount, packetLength, tMin, tMax, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureSensorUpdate")]
		public int SP_TemperatureSensorUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SensorType", DbType="VarChar(20)")] string sensorType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WireCount", DbType="Int")] System.Nullable<int> wireCount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PacketLength", DbType="Float")] System.Nullable<double> packetLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMin", DbType="Int")] System.Nullable<int> tMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMax", DbType="Int")] System.Nullable<int> tMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, brand, sensorType, wireCount, packetLength, tMin, tMax, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureTransmitterDelete")]
		public int SP_TemperatureTransmitterDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureTransmitterInsert")]
		public int SP_TemperatureTransmitterInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Model", DbType="VarChar(50)")] string model, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HMIState", DbType="Bit")] System.Nullable<bool> hMIState, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PacketLength", DbType="Float")] System.Nullable<double> packetLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SensorType", DbType="VarChar(20)")] string sensorType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMin", DbType="Int")] System.Nullable<int> tMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMax", DbType="Int")] System.Nullable<int> tMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, model, brand, hMIState, packetLength, sensorType, tMin, tMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(11)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_TemperatureTransmitterUpdate")]
		public int SP_TemperatureTransmitterUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Model", DbType="VarChar(50)")] string model, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Brand", DbType="VarChar(50)")] string brand, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HMIState", DbType="Bit")] System.Nullable<bool> hMIState, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PacketLength", DbType="Float")] System.Nullable<double> packetLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SensorType", DbType="VarChar(20)")] string sensorType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMin", DbType="Int")] System.Nullable<int> tMin, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TMax", DbType="Int")] System.Nullable<int> tMax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalibrationDuration", DbType="Int")] System.Nullable<int> calibrationDuration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(4000)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, model, brand, hMIState, packetLength, sensorType, tMin, tMax, calibrationDuration, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(11)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_WorkingPressureDelete")]
		public int SP_WorkingPressureDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_WorkingPressureInsert")]
		public int SP_WorkingPressureInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_WorkingPressureUpdate")]
		public int SP_WorkingPressureUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_WorkShopDelete")]
		public int SP_WorkShopDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_WorkShopInsert")]
		public int SP_WorkShopInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_WorkShopUpdate")]
		public int SP_WorkShopUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_EquipmentStateDelete")]
		public int SP_EquipmentStateDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_EquipmentStateInsert")]
		public int SP_EquipmentStateInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_EquipmentStateUpdate")]
		public int SP_EquipmentStateUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_StationLinkTypeInsert")]
		public int SP_StationLinkTypeInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(500)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_StationLinkTypeUpdate")]
		public int SP_StationLinkTypeUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="SmallInt")] System.Nullable<short> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(500)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, description, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_ParametersDelete")]
		public int SP_ParametersDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(2000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, msgRet);
			msgRet = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_ParametersInsert")]
		public int SP_ParametersInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_ParametersUpdate")]
		public int SP_ParametersUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1000)")] ref string msgRet)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, isActive, msgRet);
			msgRet = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_Monitoring")]
	public partial class TBL_Monitoring : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Brand;
		
		private double _Size;
		
		private string _Class;
		
		private int _Grate;
		
		private bool _IsActive;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnSizeChanging(double value);
    partial void OnSizeChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnGrateChanging(int value);
    partial void OnGrateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TBL_Monitoring()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Float NOT NULL")]
		public double Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="VarChar(50)")]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grate", DbType="Int NOT NULL")]
		public int Grate
		{
			get
			{
				return this._Grate;
			}
			set
			{
				if ((this._Grate != value))
				{
					this.OnGrateChanging(value);
					this.SendPropertyChanging();
					this._Grate = value;
					this.SendPropertyChanged("Grate");
					this.OnGrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_CounterInsLoc")]
	public partial class TBL_CounterInsLoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_CounterInsLoc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_GasStationType")]
	public partial class TBL_GasStationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_GasStationType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_WorkingPressure")]
	public partial class TBL_WorkingPressure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_WorkingPressure()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_ZoneOperation")]
	public partial class TBL_ZoneOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_ZoneOperation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_UseType")]
	public partial class TBL_UseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_UseType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_MonitoringSysState")]
	public partial class TBL_MonitoringSysState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_MonitoringSysState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_Line")]
	public partial class TBL_Line : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private short _ZoneOperation_Id;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnZoneOperation_IdChanging(short value);
    partial void OnZoneOperation_IdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_Line()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneOperation_Id", DbType="SmallInt NOT NULL")]
		public short ZoneOperation_Id
		{
			get
			{
				return this._ZoneOperation_Id;
			}
			set
			{
				if ((this._ZoneOperation_Id != value))
				{
					this.OnZoneOperation_IdChanging(value);
					this.SendPropertyChanging();
					this._ZoneOperation_Id = value;
					this.SendPropertyChanged("ZoneOperation_Id");
					this.OnZoneOperation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_Store")]
	public partial class TBL_Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_Store()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_WorkShop")]
	public partial class TBL_WorkShop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_WorkShop()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_Calibration")]
	public partial class TBL_Calibration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_Calibration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_TemperatureGage")]
	public partial class TBL_TemperatureGage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private double _GageSize;
		
		private double _PacketLength;
		
		private int _TMin;
		
		private int _TMax;
		
		private int _CalibrationDuration;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnGageSizeChanging(double value);
    partial void OnGageSizeChanged();
    partial void OnPacketLengthChanging(double value);
    partial void OnPacketLengthChanged();
    partial void OnTMinChanging(int value);
    partial void OnTMinChanged();
    partial void OnTMaxChanging(int value);
    partial void OnTMaxChanged();
    partial void OnCalibrationDurationChanging(int value);
    partial void OnCalibrationDurationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_TemperatureGage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GageSize", DbType="Float NOT NULL")]
		public double GageSize
		{
			get
			{
				return this._GageSize;
			}
			set
			{
				if ((this._GageSize != value))
				{
					this.OnGageSizeChanging(value);
					this.SendPropertyChanging();
					this._GageSize = value;
					this.SendPropertyChanged("GageSize");
					this.OnGageSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacketLength", DbType="Float NOT NULL")]
		public double PacketLength
		{
			get
			{
				return this._PacketLength;
			}
			set
			{
				if ((this._PacketLength != value))
				{
					this.OnPacketLengthChanging(value);
					this.SendPropertyChanging();
					this._PacketLength = value;
					this.SendPropertyChanged("PacketLength");
					this.OnPacketLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TMin", DbType="Int NOT NULL")]
		public int TMin
		{
			get
			{
				return this._TMin;
			}
			set
			{
				if ((this._TMin != value))
				{
					this.OnTMinChanging(value);
					this.SendPropertyChanging();
					this._TMin = value;
					this.SendPropertyChanged("TMin");
					this.OnTMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TMax", DbType="Int NOT NULL")]
		public int TMax
		{
			get
			{
				return this._TMax;
			}
			set
			{
				if ((this._TMax != value))
				{
					this.OnTMaxChanging(value);
					this.SendPropertyChanging();
					this._TMax = value;
					this.SendPropertyChanged("TMax");
					this.OnTMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDuration", DbType="Int NOT NULL")]
		public int CalibrationDuration
		{
			get
			{
				return this._CalibrationDuration;
			}
			set
			{
				if ((this._CalibrationDuration != value))
				{
					this.OnCalibrationDurationChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDuration = value;
					this.SendPropertyChanged("CalibrationDuration");
					this.OnCalibrationDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_TemperatureTransmitter")]
	public partial class TBL_TemperatureTransmitter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Model;
		
		private string _Brand;
		
		private bool _HMIState;
		
		private double _PacketLength;
		
		private string _SensorType;
		
		private System.Nullable<int> _TMin;
		
		private System.Nullable<int> _TMax;
		
		private int _CalibrationDuration;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnHMIStateChanging(bool value);
    partial void OnHMIStateChanged();
    partial void OnPacketLengthChanging(double value);
    partial void OnPacketLengthChanged();
    partial void OnSensorTypeChanging(string value);
    partial void OnSensorTypeChanged();
    partial void OnTMinChanging(System.Nullable<int> value);
    partial void OnTMinChanged();
    partial void OnTMaxChanging(System.Nullable<int> value);
    partial void OnTMaxChanged();
    partial void OnCalibrationDurationChanging(int value);
    partial void OnCalibrationDurationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_TemperatureTransmitter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HMIState", DbType="Bit NOT NULL")]
		public bool HMIState
		{
			get
			{
				return this._HMIState;
			}
			set
			{
				if ((this._HMIState != value))
				{
					this.OnHMIStateChanging(value);
					this.SendPropertyChanging();
					this._HMIState = value;
					this.SendPropertyChanged("HMIState");
					this.OnHMIStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacketLength", DbType="Float NOT NULL")]
		public double PacketLength
		{
			get
			{
				return this._PacketLength;
			}
			set
			{
				if ((this._PacketLength != value))
				{
					this.OnPacketLengthChanging(value);
					this.SendPropertyChanging();
					this._PacketLength = value;
					this.SendPropertyChanged("PacketLength");
					this.OnPacketLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SensorType
		{
			get
			{
				return this._SensorType;
			}
			set
			{
				if ((this._SensorType != value))
				{
					this.OnSensorTypeChanging(value);
					this.SendPropertyChanging();
					this._SensorType = value;
					this.SendPropertyChanged("SensorType");
					this.OnSensorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TMin", DbType="Int")]
		public System.Nullable<int> TMin
		{
			get
			{
				return this._TMin;
			}
			set
			{
				if ((this._TMin != value))
				{
					this.OnTMinChanging(value);
					this.SendPropertyChanging();
					this._TMin = value;
					this.SendPropertyChanged("TMin");
					this.OnTMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TMax", DbType="Int")]
		public System.Nullable<int> TMax
		{
			get
			{
				return this._TMax;
			}
			set
			{
				if ((this._TMax != value))
				{
					this.OnTMaxChanging(value);
					this.SendPropertyChanging();
					this._TMax = value;
					this.SendPropertyChanged("TMax");
					this.OnTMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDuration", DbType="Int NOT NULL")]
		public int CalibrationDuration
		{
			get
			{
				return this._CalibrationDuration;
			}
			set
			{
				if ((this._CalibrationDuration != value))
				{
					this.OnCalibrationDurationChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDuration = value;
					this.SendPropertyChanged("CalibrationDuration");
					this.OnCalibrationDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_TemperatureSensor")]
	public partial class TBL_TemperatureSensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private string _SensorType;
		
		private int _WireCount;
		
		private double _PacketLength;
		
		private System.Nullable<int> _TMin;
		
		private System.Nullable<int> _TMax;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnSensorTypeChanging(string value);
    partial void OnSensorTypeChanged();
    partial void OnWireCountChanging(int value);
    partial void OnWireCountChanged();
    partial void OnPacketLengthChanging(double value);
    partial void OnPacketLengthChanged();
    partial void OnTMinChanging(System.Nullable<int> value);
    partial void OnTMinChanged();
    partial void OnTMaxChanging(System.Nullable<int> value);
    partial void OnTMaxChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_TemperatureSensor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SensorType
		{
			get
			{
				return this._SensorType;
			}
			set
			{
				if ((this._SensorType != value))
				{
					this.OnSensorTypeChanging(value);
					this.SendPropertyChanging();
					this._SensorType = value;
					this.SendPropertyChanged("SensorType");
					this.OnSensorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WireCount", DbType="Int NOT NULL")]
		public int WireCount
		{
			get
			{
				return this._WireCount;
			}
			set
			{
				if ((this._WireCount != value))
				{
					this.OnWireCountChanging(value);
					this.SendPropertyChanging();
					this._WireCount = value;
					this.SendPropertyChanged("WireCount");
					this.OnWireCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacketLength", DbType="Float NOT NULL")]
		public double PacketLength
		{
			get
			{
				return this._PacketLength;
			}
			set
			{
				if ((this._PacketLength != value))
				{
					this.OnPacketLengthChanging(value);
					this.SendPropertyChanging();
					this._PacketLength = value;
					this.SendPropertyChanged("PacketLength");
					this.OnPacketLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TMin", DbType="Int")]
		public System.Nullable<int> TMin
		{
			get
			{
				return this._TMin;
			}
			set
			{
				if ((this._TMin != value))
				{
					this.OnTMinChanging(value);
					this.SendPropertyChanging();
					this._TMin = value;
					this.SendPropertyChanged("TMin");
					this.OnTMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TMax", DbType="Int")]
		public System.Nullable<int> TMax
		{
			get
			{
				return this._TMax;
			}
			set
			{
				if ((this._TMax != value))
				{
					this.OnTMaxChanging(value);
					this.SendPropertyChanging();
					this._TMax = value;
					this.SendPropertyChanged("TMax");
					this.OnTMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_Counter")]
	public partial class TBL_Counter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private double _Size;
		
		private string _Class;
		
		private int _Grate;
		
		private int _CalibrationDuration;
		
		private string _Description;
		
		private System.Nullable<bool> _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnSizeChanging(double value);
    partial void OnSizeChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnGrateChanging(int value);
    partial void OnGrateChanged();
    partial void OnCalibrationDurationChanging(int value);
    partial void OnCalibrationDurationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_Counter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Float NOT NULL")]
		public double Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="VarChar(50)")]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grate", DbType="Int NOT NULL")]
		public int Grate
		{
			get
			{
				return this._Grate;
			}
			set
			{
				if ((this._Grate != value))
				{
					this.OnGrateChanging(value);
					this.SendPropertyChanging();
					this._Grate = value;
					this.SendPropertyChanged("Grate");
					this.OnGrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDuration", DbType="Int NOT NULL")]
		public int CalibrationDuration
		{
			get
			{
				return this._CalibrationDuration;
			}
			set
			{
				if ((this._CalibrationDuration != value))
				{
					this.OnCalibrationDurationChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDuration = value;
					this.SendPropertyChanged("CalibrationDuration");
					this.OnCalibrationDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_EVCD")]
	public partial class TBL_EVCD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Model;
		
		private string _Brand;
		
		private int _PMin;
		
		private int _PMax;
		
		private int _CalibrationDuration;
		
		private string _Description;
		
		private System.Nullable<bool> _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnPMinChanging(int value);
    partial void OnPMinChanged();
    partial void OnPMaxChanging(int value);
    partial void OnPMaxChanged();
    partial void OnCalibrationDurationChanging(int value);
    partial void OnCalibrationDurationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_EVCD()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMin", DbType="Int NOT NULL")]
		public int PMin
		{
			get
			{
				return this._PMin;
			}
			set
			{
				if ((this._PMin != value))
				{
					this.OnPMinChanging(value);
					this.SendPropertyChanging();
					this._PMin = value;
					this.SendPropertyChanged("PMin");
					this.OnPMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMax", DbType="Int NOT NULL")]
		public int PMax
		{
			get
			{
				return this._PMax;
			}
			set
			{
				if ((this._PMax != value))
				{
					this.OnPMaxChanging(value);
					this.SendPropertyChanging();
					this._PMax = value;
					this.SendPropertyChanged("PMax");
					this.OnPMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDuration", DbType="Int NOT NULL")]
		public int CalibrationDuration
		{
			get
			{
				return this._CalibrationDuration;
			}
			set
			{
				if ((this._CalibrationDuration != value))
				{
					this.OnCalibrationDurationChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDuration = value;
					this.SendPropertyChanged("CalibrationDuration");
					this.OnCalibrationDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_EquipmentState")]
	public partial class TBL_EquipmentState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_EquipmentState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_Supplier")]
	public partial class TBL_Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _Tel;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_Supplier()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_LocationState")]
	public partial class TBL_LocationState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_LocationState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_PressureGage")]
	public partial class TBL_PressureGage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private double _GageSize;
		
		private int _PMax;
		
		private int _CalibrationDuration;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnGageSizeChanging(double value);
    partial void OnGageSizeChanged();
    partial void OnPMaxChanging(int value);
    partial void OnPMaxChanged();
    partial void OnCalibrationDurationChanging(int value);
    partial void OnCalibrationDurationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_PressureGage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GageSize", DbType="Float NOT NULL")]
		public double GageSize
		{
			get
			{
				return this._GageSize;
			}
			set
			{
				if ((this._GageSize != value))
				{
					this.OnGageSizeChanging(value);
					this.SendPropertyChanging();
					this._GageSize = value;
					this.SendPropertyChanged("GageSize");
					this.OnGageSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMax", DbType="Int NOT NULL")]
		public int PMax
		{
			get
			{
				return this._PMax;
			}
			set
			{
				if ((this._PMax != value))
				{
					this.OnPMaxChanging(value);
					this.SendPropertyChanging();
					this._PMax = value;
					this.SendPropertyChanged("PMax");
					this.OnPMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDuration", DbType="Int NOT NULL")]
		public int CalibrationDuration
		{
			get
			{
				return this._CalibrationDuration;
			}
			set
			{
				if ((this._CalibrationDuration != value))
				{
					this.OnCalibrationDurationChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDuration = value;
					this.SendPropertyChanged("CalibrationDuration");
					this.OnCalibrationDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_PressureTransmitter")]
	public partial class TBL_PressureTransmitter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Model;
		
		private string _Brand;
		
		private bool _HMIState;
		
		private int _PMax;
		
		private int _CalibrationDuration;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnHMIStateChanging(bool value);
    partial void OnHMIStateChanged();
    partial void OnPMaxChanging(int value);
    partial void OnPMaxChanged();
    partial void OnCalibrationDurationChanging(int value);
    partial void OnCalibrationDurationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_PressureTransmitter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HMIState", DbType="Bit NOT NULL")]
		public bool HMIState
		{
			get
			{
				return this._HMIState;
			}
			set
			{
				if ((this._HMIState != value))
				{
					this.OnHMIStateChanging(value);
					this.SendPropertyChanging();
					this._HMIState = value;
					this.SendPropertyChanged("HMIState");
					this.OnHMIStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMax", DbType="Int NOT NULL")]
		public int PMax
		{
			get
			{
				return this._PMax;
			}
			set
			{
				if ((this._PMax != value))
				{
					this.OnPMaxChanging(value);
					this.SendPropertyChanging();
					this._PMax = value;
					this.SendPropertyChanged("PMax");
					this.OnPMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDuration", DbType="Int NOT NULL")]
		public int CalibrationDuration
		{
			get
			{
				return this._CalibrationDuration;
			}
			set
			{
				if ((this._CalibrationDuration != value))
				{
					this.OnCalibrationDurationChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDuration = value;
					this.SendPropertyChanged("CalibrationDuration");
					this.OnCalibrationDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VW_Line")]
	public partial class VW_Line
	{
		
		private short _Id;
		
		private string _Name;
		
		private short _ZoneOperation_Id;
		
		private string _Description;
		
		private bool _IsActive;
		
		private string _ZoneOperationName;
		
		public VW_Line()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="SmallInt NOT NULL")]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneOperation_Id", DbType="SmallInt NOT NULL")]
		public short ZoneOperation_Id
		{
			get
			{
				return this._ZoneOperation_Id;
			}
			set
			{
				if ((this._ZoneOperation_Id != value))
				{
					this._ZoneOperation_Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneOperationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ZoneOperationName
		{
			get
			{
				return this._ZoneOperationName;
			}
			set
			{
				if ((this._ZoneOperationName != value))
				{
					this._ZoneOperationName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_StationLinkType")]
	public partial class TBL_StationLinkType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_StationLinkType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBL_Parameters")]
	public partial class TBL_Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public TBL_Parameter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table_TSample")]
	public partial class Table_TSample : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _time_Stamp;
		
		private string _strTimeStampShamsi;
		
		private bool _bInvalid;
		
		private int _nProjectID;
		
		private string _GasStationCode;
		
		private string _GasStationName;
		
		private float _fSysUpTime_Hour;
		
		private int _nSourceID_OfResetPAC;
		
		private bool _bResetPAC_Pend;
		
		private System.Nullable<float> _fStationCapacity;
		
		private System.Nullable<float> _fTotalQb;
		
		private System.Nullable<float> _fTotalQm;
		
		private float _fInGasT;
		
		private float _fOutGasT;
		
		private float _fInGasP;
		
		private float _fOutGasP;
		
		private float _fAirT;
		
		private System.Nullable<long> _EK1_nVb;
		
		private System.Nullable<long> _EK1_nVbD;
		
		private System.Nullable<long> _EK1_nVm;
		
		private System.Nullable<long> _EK1_nVmD;
		
		private System.Nullable<float> _EK1_fP_Psi;
		
		private System.Nullable<float> _EK1_fT;
		
		private System.Nullable<float> _EK1_fC;
		
		private System.Nullable<float> _EK1_fQm;
		
		private System.Nullable<float> _EK1_fQb;
		
		private System.Nullable<float> _EK1_fTbX;
		
		private System.Nullable<float> _EK1_fPbX;
		
		private System.Nullable<int> _EK1_nBatRemain;
		
		private System.Nullable<long> _EK2_nVb;
		
		private System.Nullable<long> _EK2_nVbD;
		
		private System.Nullable<long> _EK2_nVm;
		
		private System.Nullable<long> _EK2_nVmD;
		
		private System.Nullable<float> _EK2_fP_Psi;
		
		private System.Nullable<float> _EK2_fT;
		
		private System.Nullable<float> _EK2_fC;
		
		private System.Nullable<float> _EK2_fQm;
		
		private System.Nullable<float> _EK2_fQb;
		
		private System.Nullable<float> _EK2_fTbX;
		
		private System.Nullable<float> _EK2_fPbX;
		
		private System.Nullable<int> _EK2_nBatRemain;
		
		private System.Nullable<long> _EK3_nVb;
		
		private System.Nullable<long> _EK3_nVbD;
		
		private System.Nullable<long> _EK3_nVm;
		
		private System.Nullable<long> _EK3_nVmD;
		
		private System.Nullable<float> _EK3_fP_Psi;
		
		private System.Nullable<float> _EK3_fT;
		
		private System.Nullable<float> _EK3_fC;
		
		private System.Nullable<float> _EK3_fQm;
		
		private System.Nullable<float> _EK3_fQb;
		
		private System.Nullable<float> _EK3_fTbX;
		
		private System.Nullable<float> _EK3_fPbX;
		
		private System.Nullable<int> _EK3_nBatRemain;
		
		private float _fInT_Ht1;
		
		private float _fOutT_Ht1;
		
		private bool _bWaterLLA_Ht1;
		
		private float _fInT_Ht2;
		
		private float _fOutT_Ht2;
		
		private float _fWaterT_Ht2;
		
		private bool _bWaterLLA_Ht2;
		
		private float _fWaterT_Ht1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontime_StampChanging(System.DateTime value);
    partial void Ontime_StampChanged();
    partial void OnstrTimeStampShamsiChanging(string value);
    partial void OnstrTimeStampShamsiChanged();
    partial void OnbInvalidChanging(bool value);
    partial void OnbInvalidChanged();
    partial void OnnProjectIDChanging(int value);
    partial void OnnProjectIDChanged();
    partial void OnGasStationCodeChanging(string value);
    partial void OnGasStationCodeChanged();
    partial void OnGasStationNameChanging(string value);
    partial void OnGasStationNameChanged();
    partial void OnfSysUpTime_HourChanging(float value);
    partial void OnfSysUpTime_HourChanged();
    partial void OnnSourceID_OfResetPACChanging(int value);
    partial void OnnSourceID_OfResetPACChanged();
    partial void OnbResetPAC_PendChanging(bool value);
    partial void OnbResetPAC_PendChanged();
    partial void OnfStationCapacityChanging(System.Nullable<float> value);
    partial void OnfStationCapacityChanged();
    partial void OnfTotalQbChanging(System.Nullable<float> value);
    partial void OnfTotalQbChanged();
    partial void OnfTotalQmChanging(System.Nullable<float> value);
    partial void OnfTotalQmChanged();
    partial void OnfInGasTChanging(float value);
    partial void OnfInGasTChanged();
    partial void OnfOutGasTChanging(float value);
    partial void OnfOutGasTChanged();
    partial void OnfInGasPChanging(float value);
    partial void OnfInGasPChanged();
    partial void OnfOutGasPChanging(float value);
    partial void OnfOutGasPChanged();
    partial void OnfAirTChanging(float value);
    partial void OnfAirTChanged();
    partial void OnEK1_nVbChanging(System.Nullable<long> value);
    partial void OnEK1_nVbChanged();
    partial void OnEK1_nVbDChanging(System.Nullable<long> value);
    partial void OnEK1_nVbDChanged();
    partial void OnEK1_nVmChanging(System.Nullable<long> value);
    partial void OnEK1_nVmChanged();
    partial void OnEK1_nVmDChanging(System.Nullable<long> value);
    partial void OnEK1_nVmDChanged();
    partial void OnEK1_fP_PsiChanging(System.Nullable<float> value);
    partial void OnEK1_fP_PsiChanged();
    partial void OnEK1_fTChanging(System.Nullable<float> value);
    partial void OnEK1_fTChanged();
    partial void OnEK1_fCChanging(System.Nullable<float> value);
    partial void OnEK1_fCChanged();
    partial void OnEK1_fQmChanging(System.Nullable<float> value);
    partial void OnEK1_fQmChanged();
    partial void OnEK1_fQbChanging(System.Nullable<float> value);
    partial void OnEK1_fQbChanged();
    partial void OnEK1_fTbXChanging(System.Nullable<float> value);
    partial void OnEK1_fTbXChanged();
    partial void OnEK1_fPbXChanging(System.Nullable<float> value);
    partial void OnEK1_fPbXChanged();
    partial void OnEK1_nBatRemainChanging(System.Nullable<int> value);
    partial void OnEK1_nBatRemainChanged();
    partial void OnEK2_nVbChanging(System.Nullable<long> value);
    partial void OnEK2_nVbChanged();
    partial void OnEK2_nVbDChanging(System.Nullable<long> value);
    partial void OnEK2_nVbDChanged();
    partial void OnEK2_nVmChanging(System.Nullable<long> value);
    partial void OnEK2_nVmChanged();
    partial void OnEK2_nVmDChanging(System.Nullable<long> value);
    partial void OnEK2_nVmDChanged();
    partial void OnEK2_fP_PsiChanging(System.Nullable<float> value);
    partial void OnEK2_fP_PsiChanged();
    partial void OnEK2_fTChanging(System.Nullable<float> value);
    partial void OnEK2_fTChanged();
    partial void OnEK2_fCChanging(System.Nullable<float> value);
    partial void OnEK2_fCChanged();
    partial void OnEK2_fQmChanging(System.Nullable<float> value);
    partial void OnEK2_fQmChanged();
    partial void OnEK2_fQbChanging(System.Nullable<float> value);
    partial void OnEK2_fQbChanged();
    partial void OnEK2_fTbXChanging(System.Nullable<float> value);
    partial void OnEK2_fTbXChanged();
    partial void OnEK2_fPbXChanging(System.Nullable<float> value);
    partial void OnEK2_fPbXChanged();
    partial void OnEK2_nBatRemainChanging(System.Nullable<int> value);
    partial void OnEK2_nBatRemainChanged();
    partial void OnEK3_nVbChanging(System.Nullable<long> value);
    partial void OnEK3_nVbChanged();
    partial void OnEK3_nVbDChanging(System.Nullable<long> value);
    partial void OnEK3_nVbDChanged();
    partial void OnEK3_nVmChanging(System.Nullable<long> value);
    partial void OnEK3_nVmChanged();
    partial void OnEK3_nVmDChanging(System.Nullable<long> value);
    partial void OnEK3_nVmDChanged();
    partial void OnEK3_fP_PsiChanging(System.Nullable<float> value);
    partial void OnEK3_fP_PsiChanged();
    partial void OnEK3_fTChanging(System.Nullable<float> value);
    partial void OnEK3_fTChanged();
    partial void OnEK3_fCChanging(System.Nullable<float> value);
    partial void OnEK3_fCChanged();
    partial void OnEK3_fQmChanging(System.Nullable<float> value);
    partial void OnEK3_fQmChanged();
    partial void OnEK3_fQbChanging(System.Nullable<float> value);
    partial void OnEK3_fQbChanged();
    partial void OnEK3_fTbXChanging(System.Nullable<float> value);
    partial void OnEK3_fTbXChanged();
    partial void OnEK3_fPbXChanging(System.Nullable<float> value);
    partial void OnEK3_fPbXChanged();
    partial void OnEK3_nBatRemainChanging(System.Nullable<int> value);
    partial void OnEK3_nBatRemainChanged();
    partial void OnfInT_Ht1Changing(float value);
    partial void OnfInT_Ht1Changed();
    partial void OnfOutT_Ht1Changing(float value);
    partial void OnfOutT_Ht1Changed();
    partial void OnbWaterLLA_Ht1Changing(bool value);
    partial void OnbWaterLLA_Ht1Changed();
    partial void OnfInT_Ht2Changing(float value);
    partial void OnfInT_Ht2Changed();
    partial void OnfOutT_Ht2Changing(float value);
    partial void OnfOutT_Ht2Changed();
    partial void OnfWaterT_Ht2Changing(float value);
    partial void OnfWaterT_Ht2Changed();
    partial void OnbWaterLLA_Ht2Changing(bool value);
    partial void OnbWaterLLA_Ht2Changed();
    partial void OnfWaterT_Ht1Changing(float value);
    partial void OnfWaterT_Ht1Changed();
    #endregion
		
		public Table_TSample()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_Stamp", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime time_Stamp
		{
			get
			{
				return this._time_Stamp;
			}
			set
			{
				if ((this._time_Stamp != value))
				{
					this.Ontime_StampChanging(value);
					this.SendPropertyChanging();
					this._time_Stamp = value;
					this.SendPropertyChanged("time_Stamp");
					this.Ontime_StampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strTimeStampShamsi", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string strTimeStampShamsi
		{
			get
			{
				return this._strTimeStampShamsi;
			}
			set
			{
				if ((this._strTimeStampShamsi != value))
				{
					this.OnstrTimeStampShamsiChanging(value);
					this.SendPropertyChanging();
					this._strTimeStampShamsi = value;
					this.SendPropertyChanged("strTimeStampShamsi");
					this.OnstrTimeStampShamsiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bInvalid", DbType="Bit NOT NULL")]
		public bool bInvalid
		{
			get
			{
				return this._bInvalid;
			}
			set
			{
				if ((this._bInvalid != value))
				{
					this.OnbInvalidChanging(value);
					this.SendPropertyChanging();
					this._bInvalid = value;
					this.SendPropertyChanged("bInvalid");
					this.OnbInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nProjectID", DbType="Int NOT NULL")]
		public int nProjectID
		{
			get
			{
				return this._nProjectID;
			}
			set
			{
				if ((this._nProjectID != value))
				{
					this.OnnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._nProjectID = value;
					this.SendPropertyChanged("nProjectID");
					this.OnnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GasStationCode", DbType="VarChar(20)")]
		public string GasStationCode
		{
			get
			{
				return this._GasStationCode;
			}
			set
			{
				if ((this._GasStationCode != value))
				{
					this.OnGasStationCodeChanging(value);
					this.SendPropertyChanging();
					this._GasStationCode = value;
					this.SendPropertyChanged("GasStationCode");
					this.OnGasStationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GasStationName", DbType="VarChar(100)")]
		public string GasStationName
		{
			get
			{
				return this._GasStationName;
			}
			set
			{
				if ((this._GasStationName != value))
				{
					this.OnGasStationNameChanging(value);
					this.SendPropertyChanging();
					this._GasStationName = value;
					this.SendPropertyChanged("GasStationName");
					this.OnGasStationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fSysUpTime_Hour", DbType="Real NOT NULL")]
		public float fSysUpTime_Hour
		{
			get
			{
				return this._fSysUpTime_Hour;
			}
			set
			{
				if ((this._fSysUpTime_Hour != value))
				{
					this.OnfSysUpTime_HourChanging(value);
					this.SendPropertyChanging();
					this._fSysUpTime_Hour = value;
					this.SendPropertyChanged("fSysUpTime_Hour");
					this.OnfSysUpTime_HourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nSourceID_OfResetPAC", DbType="Int NOT NULL")]
		public int nSourceID_OfResetPAC
		{
			get
			{
				return this._nSourceID_OfResetPAC;
			}
			set
			{
				if ((this._nSourceID_OfResetPAC != value))
				{
					this.OnnSourceID_OfResetPACChanging(value);
					this.SendPropertyChanging();
					this._nSourceID_OfResetPAC = value;
					this.SendPropertyChanged("nSourceID_OfResetPAC");
					this.OnnSourceID_OfResetPACChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bResetPAC_Pend", DbType="Bit NOT NULL")]
		public bool bResetPAC_Pend
		{
			get
			{
				return this._bResetPAC_Pend;
			}
			set
			{
				if ((this._bResetPAC_Pend != value))
				{
					this.OnbResetPAC_PendChanging(value);
					this.SendPropertyChanging();
					this._bResetPAC_Pend = value;
					this.SendPropertyChanged("bResetPAC_Pend");
					this.OnbResetPAC_PendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fStationCapacity", DbType="Real")]
		public System.Nullable<float> fStationCapacity
		{
			get
			{
				return this._fStationCapacity;
			}
			set
			{
				if ((this._fStationCapacity != value))
				{
					this.OnfStationCapacityChanging(value);
					this.SendPropertyChanging();
					this._fStationCapacity = value;
					this.SendPropertyChanged("fStationCapacity");
					this.OnfStationCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fTotalQb", DbType="Real")]
		public System.Nullable<float> fTotalQb
		{
			get
			{
				return this._fTotalQb;
			}
			set
			{
				if ((this._fTotalQb != value))
				{
					this.OnfTotalQbChanging(value);
					this.SendPropertyChanging();
					this._fTotalQb = value;
					this.SendPropertyChanged("fTotalQb");
					this.OnfTotalQbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fTotalQm", DbType="Real")]
		public System.Nullable<float> fTotalQm
		{
			get
			{
				return this._fTotalQm;
			}
			set
			{
				if ((this._fTotalQm != value))
				{
					this.OnfTotalQmChanging(value);
					this.SendPropertyChanging();
					this._fTotalQm = value;
					this.SendPropertyChanged("fTotalQm");
					this.OnfTotalQmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fInGasT", DbType="Real NOT NULL")]
		public float fInGasT
		{
			get
			{
				return this._fInGasT;
			}
			set
			{
				if ((this._fInGasT != value))
				{
					this.OnfInGasTChanging(value);
					this.SendPropertyChanging();
					this._fInGasT = value;
					this.SendPropertyChanged("fInGasT");
					this.OnfInGasTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fOutGasT", DbType="Real NOT NULL")]
		public float fOutGasT
		{
			get
			{
				return this._fOutGasT;
			}
			set
			{
				if ((this._fOutGasT != value))
				{
					this.OnfOutGasTChanging(value);
					this.SendPropertyChanging();
					this._fOutGasT = value;
					this.SendPropertyChanged("fOutGasT");
					this.OnfOutGasTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fInGasP", DbType="Real NOT NULL")]
		public float fInGasP
		{
			get
			{
				return this._fInGasP;
			}
			set
			{
				if ((this._fInGasP != value))
				{
					this.OnfInGasPChanging(value);
					this.SendPropertyChanging();
					this._fInGasP = value;
					this.SendPropertyChanged("fInGasP");
					this.OnfInGasPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fOutGasP", DbType="Real NOT NULL")]
		public float fOutGasP
		{
			get
			{
				return this._fOutGasP;
			}
			set
			{
				if ((this._fOutGasP != value))
				{
					this.OnfOutGasPChanging(value);
					this.SendPropertyChanging();
					this._fOutGasP = value;
					this.SendPropertyChanged("fOutGasP");
					this.OnfOutGasPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fAirT", DbType="Real NOT NULL")]
		public float fAirT
		{
			get
			{
				return this._fAirT;
			}
			set
			{
				if ((this._fAirT != value))
				{
					this.OnfAirTChanging(value);
					this.SendPropertyChanging();
					this._fAirT = value;
					this.SendPropertyChanged("fAirT");
					this.OnfAirTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_nVb", DbType="BigInt")]
		public System.Nullable<long> EK1_nVb
		{
			get
			{
				return this._EK1_nVb;
			}
			set
			{
				if ((this._EK1_nVb != value))
				{
					this.OnEK1_nVbChanging(value);
					this.SendPropertyChanging();
					this._EK1_nVb = value;
					this.SendPropertyChanged("EK1_nVb");
					this.OnEK1_nVbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_nVbD", DbType="BigInt")]
		public System.Nullable<long> EK1_nVbD
		{
			get
			{
				return this._EK1_nVbD;
			}
			set
			{
				if ((this._EK1_nVbD != value))
				{
					this.OnEK1_nVbDChanging(value);
					this.SendPropertyChanging();
					this._EK1_nVbD = value;
					this.SendPropertyChanged("EK1_nVbD");
					this.OnEK1_nVbDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_nVm", DbType="BigInt")]
		public System.Nullable<long> EK1_nVm
		{
			get
			{
				return this._EK1_nVm;
			}
			set
			{
				if ((this._EK1_nVm != value))
				{
					this.OnEK1_nVmChanging(value);
					this.SendPropertyChanging();
					this._EK1_nVm = value;
					this.SendPropertyChanged("EK1_nVm");
					this.OnEK1_nVmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_nVmD", DbType="BigInt")]
		public System.Nullable<long> EK1_nVmD
		{
			get
			{
				return this._EK1_nVmD;
			}
			set
			{
				if ((this._EK1_nVmD != value))
				{
					this.OnEK1_nVmDChanging(value);
					this.SendPropertyChanging();
					this._EK1_nVmD = value;
					this.SendPropertyChanged("EK1_nVmD");
					this.OnEK1_nVmDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_fP_Psi", DbType="Real")]
		public System.Nullable<float> EK1_fP_Psi
		{
			get
			{
				return this._EK1_fP_Psi;
			}
			set
			{
				if ((this._EK1_fP_Psi != value))
				{
					this.OnEK1_fP_PsiChanging(value);
					this.SendPropertyChanging();
					this._EK1_fP_Psi = value;
					this.SendPropertyChanged("EK1_fP_Psi");
					this.OnEK1_fP_PsiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_fT", DbType="Real")]
		public System.Nullable<float> EK1_fT
		{
			get
			{
				return this._EK1_fT;
			}
			set
			{
				if ((this._EK1_fT != value))
				{
					this.OnEK1_fTChanging(value);
					this.SendPropertyChanging();
					this._EK1_fT = value;
					this.SendPropertyChanged("EK1_fT");
					this.OnEK1_fTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_fC", DbType="Real")]
		public System.Nullable<float> EK1_fC
		{
			get
			{
				return this._EK1_fC;
			}
			set
			{
				if ((this._EK1_fC != value))
				{
					this.OnEK1_fCChanging(value);
					this.SendPropertyChanging();
					this._EK1_fC = value;
					this.SendPropertyChanged("EK1_fC");
					this.OnEK1_fCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_fQm", DbType="Real")]
		public System.Nullable<float> EK1_fQm
		{
			get
			{
				return this._EK1_fQm;
			}
			set
			{
				if ((this._EK1_fQm != value))
				{
					this.OnEK1_fQmChanging(value);
					this.SendPropertyChanging();
					this._EK1_fQm = value;
					this.SendPropertyChanged("EK1_fQm");
					this.OnEK1_fQmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_fQb", DbType="Real")]
		public System.Nullable<float> EK1_fQb
		{
			get
			{
				return this._EK1_fQb;
			}
			set
			{
				if ((this._EK1_fQb != value))
				{
					this.OnEK1_fQbChanging(value);
					this.SendPropertyChanging();
					this._EK1_fQb = value;
					this.SendPropertyChanged("EK1_fQb");
					this.OnEK1_fQbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_fTbX", DbType="Real")]
		public System.Nullable<float> EK1_fTbX
		{
			get
			{
				return this._EK1_fTbX;
			}
			set
			{
				if ((this._EK1_fTbX != value))
				{
					this.OnEK1_fTbXChanging(value);
					this.SendPropertyChanging();
					this._EK1_fTbX = value;
					this.SendPropertyChanged("EK1_fTbX");
					this.OnEK1_fTbXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_fPbX", DbType="Real")]
		public System.Nullable<float> EK1_fPbX
		{
			get
			{
				return this._EK1_fPbX;
			}
			set
			{
				if ((this._EK1_fPbX != value))
				{
					this.OnEK1_fPbXChanging(value);
					this.SendPropertyChanging();
					this._EK1_fPbX = value;
					this.SendPropertyChanged("EK1_fPbX");
					this.OnEK1_fPbXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK1_nBatRemain", DbType="Int")]
		public System.Nullable<int> EK1_nBatRemain
		{
			get
			{
				return this._EK1_nBatRemain;
			}
			set
			{
				if ((this._EK1_nBatRemain != value))
				{
					this.OnEK1_nBatRemainChanging(value);
					this.SendPropertyChanging();
					this._EK1_nBatRemain = value;
					this.SendPropertyChanged("EK1_nBatRemain");
					this.OnEK1_nBatRemainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_nVb", DbType="BigInt")]
		public System.Nullable<long> EK2_nVb
		{
			get
			{
				return this._EK2_nVb;
			}
			set
			{
				if ((this._EK2_nVb != value))
				{
					this.OnEK2_nVbChanging(value);
					this.SendPropertyChanging();
					this._EK2_nVb = value;
					this.SendPropertyChanged("EK2_nVb");
					this.OnEK2_nVbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_nVbD", DbType="BigInt")]
		public System.Nullable<long> EK2_nVbD
		{
			get
			{
				return this._EK2_nVbD;
			}
			set
			{
				if ((this._EK2_nVbD != value))
				{
					this.OnEK2_nVbDChanging(value);
					this.SendPropertyChanging();
					this._EK2_nVbD = value;
					this.SendPropertyChanged("EK2_nVbD");
					this.OnEK2_nVbDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_nVm", DbType="BigInt")]
		public System.Nullable<long> EK2_nVm
		{
			get
			{
				return this._EK2_nVm;
			}
			set
			{
				if ((this._EK2_nVm != value))
				{
					this.OnEK2_nVmChanging(value);
					this.SendPropertyChanging();
					this._EK2_nVm = value;
					this.SendPropertyChanged("EK2_nVm");
					this.OnEK2_nVmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_nVmD", DbType="BigInt")]
		public System.Nullable<long> EK2_nVmD
		{
			get
			{
				return this._EK2_nVmD;
			}
			set
			{
				if ((this._EK2_nVmD != value))
				{
					this.OnEK2_nVmDChanging(value);
					this.SendPropertyChanging();
					this._EK2_nVmD = value;
					this.SendPropertyChanged("EK2_nVmD");
					this.OnEK2_nVmDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_fP_Psi", DbType="Real")]
		public System.Nullable<float> EK2_fP_Psi
		{
			get
			{
				return this._EK2_fP_Psi;
			}
			set
			{
				if ((this._EK2_fP_Psi != value))
				{
					this.OnEK2_fP_PsiChanging(value);
					this.SendPropertyChanging();
					this._EK2_fP_Psi = value;
					this.SendPropertyChanged("EK2_fP_Psi");
					this.OnEK2_fP_PsiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_fT", DbType="Real")]
		public System.Nullable<float> EK2_fT
		{
			get
			{
				return this._EK2_fT;
			}
			set
			{
				if ((this._EK2_fT != value))
				{
					this.OnEK2_fTChanging(value);
					this.SendPropertyChanging();
					this._EK2_fT = value;
					this.SendPropertyChanged("EK2_fT");
					this.OnEK2_fTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_fC", DbType="Real")]
		public System.Nullable<float> EK2_fC
		{
			get
			{
				return this._EK2_fC;
			}
			set
			{
				if ((this._EK2_fC != value))
				{
					this.OnEK2_fCChanging(value);
					this.SendPropertyChanging();
					this._EK2_fC = value;
					this.SendPropertyChanged("EK2_fC");
					this.OnEK2_fCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_fQm", DbType="Real")]
		public System.Nullable<float> EK2_fQm
		{
			get
			{
				return this._EK2_fQm;
			}
			set
			{
				if ((this._EK2_fQm != value))
				{
					this.OnEK2_fQmChanging(value);
					this.SendPropertyChanging();
					this._EK2_fQm = value;
					this.SendPropertyChanged("EK2_fQm");
					this.OnEK2_fQmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_fQb", DbType="Real")]
		public System.Nullable<float> EK2_fQb
		{
			get
			{
				return this._EK2_fQb;
			}
			set
			{
				if ((this._EK2_fQb != value))
				{
					this.OnEK2_fQbChanging(value);
					this.SendPropertyChanging();
					this._EK2_fQb = value;
					this.SendPropertyChanged("EK2_fQb");
					this.OnEK2_fQbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_fTbX", DbType="Real")]
		public System.Nullable<float> EK2_fTbX
		{
			get
			{
				return this._EK2_fTbX;
			}
			set
			{
				if ((this._EK2_fTbX != value))
				{
					this.OnEK2_fTbXChanging(value);
					this.SendPropertyChanging();
					this._EK2_fTbX = value;
					this.SendPropertyChanged("EK2_fTbX");
					this.OnEK2_fTbXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_fPbX", DbType="Real")]
		public System.Nullable<float> EK2_fPbX
		{
			get
			{
				return this._EK2_fPbX;
			}
			set
			{
				if ((this._EK2_fPbX != value))
				{
					this.OnEK2_fPbXChanging(value);
					this.SendPropertyChanging();
					this._EK2_fPbX = value;
					this.SendPropertyChanged("EK2_fPbX");
					this.OnEK2_fPbXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK2_nBatRemain", DbType="Int")]
		public System.Nullable<int> EK2_nBatRemain
		{
			get
			{
				return this._EK2_nBatRemain;
			}
			set
			{
				if ((this._EK2_nBatRemain != value))
				{
					this.OnEK2_nBatRemainChanging(value);
					this.SendPropertyChanging();
					this._EK2_nBatRemain = value;
					this.SendPropertyChanged("EK2_nBatRemain");
					this.OnEK2_nBatRemainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_nVb", DbType="BigInt")]
		public System.Nullable<long> EK3_nVb
		{
			get
			{
				return this._EK3_nVb;
			}
			set
			{
				if ((this._EK3_nVb != value))
				{
					this.OnEK3_nVbChanging(value);
					this.SendPropertyChanging();
					this._EK3_nVb = value;
					this.SendPropertyChanged("EK3_nVb");
					this.OnEK3_nVbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_nVbD", DbType="BigInt")]
		public System.Nullable<long> EK3_nVbD
		{
			get
			{
				return this._EK3_nVbD;
			}
			set
			{
				if ((this._EK3_nVbD != value))
				{
					this.OnEK3_nVbDChanging(value);
					this.SendPropertyChanging();
					this._EK3_nVbD = value;
					this.SendPropertyChanged("EK3_nVbD");
					this.OnEK3_nVbDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_nVm", DbType="BigInt")]
		public System.Nullable<long> EK3_nVm
		{
			get
			{
				return this._EK3_nVm;
			}
			set
			{
				if ((this._EK3_nVm != value))
				{
					this.OnEK3_nVmChanging(value);
					this.SendPropertyChanging();
					this._EK3_nVm = value;
					this.SendPropertyChanged("EK3_nVm");
					this.OnEK3_nVmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_nVmD", DbType="BigInt")]
		public System.Nullable<long> EK3_nVmD
		{
			get
			{
				return this._EK3_nVmD;
			}
			set
			{
				if ((this._EK3_nVmD != value))
				{
					this.OnEK3_nVmDChanging(value);
					this.SendPropertyChanging();
					this._EK3_nVmD = value;
					this.SendPropertyChanged("EK3_nVmD");
					this.OnEK3_nVmDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_fP_Psi", DbType="Real")]
		public System.Nullable<float> EK3_fP_Psi
		{
			get
			{
				return this._EK3_fP_Psi;
			}
			set
			{
				if ((this._EK3_fP_Psi != value))
				{
					this.OnEK3_fP_PsiChanging(value);
					this.SendPropertyChanging();
					this._EK3_fP_Psi = value;
					this.SendPropertyChanged("EK3_fP_Psi");
					this.OnEK3_fP_PsiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_fT", DbType="Real")]
		public System.Nullable<float> EK3_fT
		{
			get
			{
				return this._EK3_fT;
			}
			set
			{
				if ((this._EK3_fT != value))
				{
					this.OnEK3_fTChanging(value);
					this.SendPropertyChanging();
					this._EK3_fT = value;
					this.SendPropertyChanged("EK3_fT");
					this.OnEK3_fTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_fC", DbType="Real")]
		public System.Nullable<float> EK3_fC
		{
			get
			{
				return this._EK3_fC;
			}
			set
			{
				if ((this._EK3_fC != value))
				{
					this.OnEK3_fCChanging(value);
					this.SendPropertyChanging();
					this._EK3_fC = value;
					this.SendPropertyChanged("EK3_fC");
					this.OnEK3_fCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_fQm", DbType="Real")]
		public System.Nullable<float> EK3_fQm
		{
			get
			{
				return this._EK3_fQm;
			}
			set
			{
				if ((this._EK3_fQm != value))
				{
					this.OnEK3_fQmChanging(value);
					this.SendPropertyChanging();
					this._EK3_fQm = value;
					this.SendPropertyChanged("EK3_fQm");
					this.OnEK3_fQmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_fQb", DbType="Real")]
		public System.Nullable<float> EK3_fQb
		{
			get
			{
				return this._EK3_fQb;
			}
			set
			{
				if ((this._EK3_fQb != value))
				{
					this.OnEK3_fQbChanging(value);
					this.SendPropertyChanging();
					this._EK3_fQb = value;
					this.SendPropertyChanged("EK3_fQb");
					this.OnEK3_fQbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_fTbX", DbType="Real")]
		public System.Nullable<float> EK3_fTbX
		{
			get
			{
				return this._EK3_fTbX;
			}
			set
			{
				if ((this._EK3_fTbX != value))
				{
					this.OnEK3_fTbXChanging(value);
					this.SendPropertyChanging();
					this._EK3_fTbX = value;
					this.SendPropertyChanged("EK3_fTbX");
					this.OnEK3_fTbXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_fPbX", DbType="Real")]
		public System.Nullable<float> EK3_fPbX
		{
			get
			{
				return this._EK3_fPbX;
			}
			set
			{
				if ((this._EK3_fPbX != value))
				{
					this.OnEK3_fPbXChanging(value);
					this.SendPropertyChanging();
					this._EK3_fPbX = value;
					this.SendPropertyChanged("EK3_fPbX");
					this.OnEK3_fPbXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EK3_nBatRemain", DbType="Int")]
		public System.Nullable<int> EK3_nBatRemain
		{
			get
			{
				return this._EK3_nBatRemain;
			}
			set
			{
				if ((this._EK3_nBatRemain != value))
				{
					this.OnEK3_nBatRemainChanging(value);
					this.SendPropertyChanging();
					this._EK3_nBatRemain = value;
					this.SendPropertyChanged("EK3_nBatRemain");
					this.OnEK3_nBatRemainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fInT_Ht1", DbType="Real NOT NULL")]
		public float fInT_Ht1
		{
			get
			{
				return this._fInT_Ht1;
			}
			set
			{
				if ((this._fInT_Ht1 != value))
				{
					this.OnfInT_Ht1Changing(value);
					this.SendPropertyChanging();
					this._fInT_Ht1 = value;
					this.SendPropertyChanged("fInT_Ht1");
					this.OnfInT_Ht1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fOutT_Ht1", DbType="Real NOT NULL")]
		public float fOutT_Ht1
		{
			get
			{
				return this._fOutT_Ht1;
			}
			set
			{
				if ((this._fOutT_Ht1 != value))
				{
					this.OnfOutT_Ht1Changing(value);
					this.SendPropertyChanging();
					this._fOutT_Ht1 = value;
					this.SendPropertyChanged("fOutT_Ht1");
					this.OnfOutT_Ht1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bWaterLLA_Ht1", DbType="Bit NOT NULL")]
		public bool bWaterLLA_Ht1
		{
			get
			{
				return this._bWaterLLA_Ht1;
			}
			set
			{
				if ((this._bWaterLLA_Ht1 != value))
				{
					this.OnbWaterLLA_Ht1Changing(value);
					this.SendPropertyChanging();
					this._bWaterLLA_Ht1 = value;
					this.SendPropertyChanged("bWaterLLA_Ht1");
					this.OnbWaterLLA_Ht1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fInT_Ht2", DbType="Real NOT NULL")]
		public float fInT_Ht2
		{
			get
			{
				return this._fInT_Ht2;
			}
			set
			{
				if ((this._fInT_Ht2 != value))
				{
					this.OnfInT_Ht2Changing(value);
					this.SendPropertyChanging();
					this._fInT_Ht2 = value;
					this.SendPropertyChanged("fInT_Ht2");
					this.OnfInT_Ht2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fOutT_Ht2", DbType="Real NOT NULL")]
		public float fOutT_Ht2
		{
			get
			{
				return this._fOutT_Ht2;
			}
			set
			{
				if ((this._fOutT_Ht2 != value))
				{
					this.OnfOutT_Ht2Changing(value);
					this.SendPropertyChanging();
					this._fOutT_Ht2 = value;
					this.SendPropertyChanged("fOutT_Ht2");
					this.OnfOutT_Ht2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fWaterT_Ht2", DbType="Real NOT NULL")]
		public float fWaterT_Ht2
		{
			get
			{
				return this._fWaterT_Ht2;
			}
			set
			{
				if ((this._fWaterT_Ht2 != value))
				{
					this.OnfWaterT_Ht2Changing(value);
					this.SendPropertyChanging();
					this._fWaterT_Ht2 = value;
					this.SendPropertyChanged("fWaterT_Ht2");
					this.OnfWaterT_Ht2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bWaterLLA_Ht2", DbType="Bit NOT NULL")]
		public bool bWaterLLA_Ht2
		{
			get
			{
				return this._bWaterLLA_Ht2;
			}
			set
			{
				if ((this._bWaterLLA_Ht2 != value))
				{
					this.OnbWaterLLA_Ht2Changing(value);
					this.SendPropertyChanging();
					this._bWaterLLA_Ht2 = value;
					this.SendPropertyChanged("bWaterLLA_Ht2");
					this.OnbWaterLLA_Ht2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fWaterT_Ht1", DbType="Real NOT NULL")]
		public float fWaterT_Ht1
		{
			get
			{
				return this._fWaterT_Ht1;
			}
			set
			{
				if ((this._fWaterT_Ht1 != value))
				{
					this.OnfWaterT_Ht1Changing(value);
					this.SendPropertyChanging();
					this._fWaterT_Ht1 = value;
					this.SendPropertyChanged("fWaterT_Ht1");
					this.OnfWaterT_Ht1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
